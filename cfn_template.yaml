
AWSTemplateFormatVersion: 2010-09-09
Description: This CFN template is used to query the parameter store and write the details in S3 bucket.

Parameters:
  FunctionName:
    Description: Lambda name which does the job
    Type: String
    Default: test-lambdafunction
  S3Bucket:
    Description: Name of the bucket where data will be stored
    Type: String
    Default: test-bucket

Resources:	

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
				          - "ssm:GetParameter"				           
                Resource: "arn:aws:ssm:*:*:parameter/*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"			           
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

  processorLambda:
	Type: AWS::Lambda::Function
	Properties:
	  FunctionName: !Ref FunctionName
	  Code:
		ZipFile: |
	  
		  import boto3, json, csv
		  
		  import cfnresponse

		  def handler(event, context):
			  print('incoming event:[{}]'.format(event))

			  ssm_client = boto3.client('ssm')
			  s3_client = boto3.client('s3')
			  
			  parameter = ssm_client.get_parameter(Name='UserName')
			  print(parameter['Parameter']['Value'])
			  res_csv_list = ['UserName', parameter['Parameter']['Value']]
			  
			  # csv Header
			  header = ['secret_name','secret_value']
			  
			  with open('/tmp/userinfo.csv', 'w', encoding='UTF8', newline='') as f:
			    writer = csv.writer(f)
				writer.writerow(header)
				writer.writerow(res_csv_list)
				
			  response = s3_client.upload_file('/tmp/userinfo.csv', !Sub '${S3Bucket}, 'userinfo.csv')

			  responseValue = 200
			  responseData = {}
			  responseData['Data'] = responseValue
			  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
			  
	  Handler: index.handler
	  Role: !GetAtt
		- LambdaExecutionRole
		- Arn
	  Runtime: python3.9
	  Timeout: 120

  customResourceInvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: processorLambda
    Version: "1.0"
    Properties:
	  ServiceToken: !GetAtt processorLambda.Arn
